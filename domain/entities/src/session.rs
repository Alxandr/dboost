//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
	fn table_name(&self) -> &str {
		"session"
	}
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
	pub id: Uuid,
	pub ctime: TimeDateTime,
	pub atime: TimeDateTime,
	pub etime: TimeDateTime,
	pub user_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
	Id,
	Ctime,
	Atime,
	Etime,
	UserId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
	Id,
}

impl PrimaryKeyTrait for PrimaryKey {
	type ValueType = Uuid;
	fn auto_increment() -> bool {
		false
	}
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
	User,
}

impl ColumnTrait for Column {
	type EntityName = Entity;
	fn def(&self) -> ColumnDef {
		match self {
			Self::Id => ColumnType::Uuid.def(),
			Self::Ctime => ColumnType::DateTime.def(),
			Self::Atime => ColumnType::DateTime.def(),
			Self::Etime => ColumnType::DateTime.def(),
			Self::UserId => ColumnType::Uuid.def().null(),
		}
	}
}

impl RelationTrait for Relation {
	fn def(&self) -> RelationDef {
		match self {
			Self::User => Entity::belongs_to(super::user::Entity)
				.from(Column::UserId)
				.to(super::user::Column::Id)
				.into(),
		}
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
